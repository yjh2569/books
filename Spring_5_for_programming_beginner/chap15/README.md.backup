# Chapter 15 : 간단한 웹 어플리케이션의 구조

## 간단한 웹 어플리케이션의 구성 요소

* 간단한 웹 어플리케이션 개발 시 사용하는 전형적인 구조는 다음 요소를 포함한다.
  * 프론트 서블릿
  * 컨트롤러 + 뷰
  * 서비스
  * DAO
  
* 프론트 서블릿은 웹 브라우저의 모든 요청을 받는 창구 역할을 한다.
  * 요청을 분석해서 알맞은 컨트롤러에 전달한다.
  * 스프링 MVC에서는 DispatcherServlet이 프론트 서블릿의 역할을 수행한다.
* 컨트롤러는 실제 웹 브라우저 요청을 처리한다.
  * 지금까지 구현한 스프링 컨트롤러가 이에 해당한다.
  * 컨트롤러는 클라이언트의 요청을 처리하기 위해 알맞은 기능을 실행하고 그 결과를 뷰에 전달한다.
  * 컨트롤러의 주요 역할
    * 클라이언트가 요구한 기능 실행
    * 응답 결과를 생성하는데 필요한 모델 생성
    * 응답 결과를 생성할 뷰 선택
  * 어플리케이션이 제공하는 기능과 사용자 요청을 연결하는 매개체로서 기능 제공을 위한 로직을 직접 수행하지는 않는다.
  * 대신 해당 로직을 제공하는 서비스에 그 처리를 위임한다.
* 서비스는 기능의 로직을 구현한다.
  * 서비스는 DB 연동이 필요하면 DAO를 사용한다.
* DAO는 Data Access Object의 약자로서 DB와 웹 어플리케이션 간에 데이터를 이동시켜 주는 역할을 맡는다.
  * 어플리케이션은 DAO를 통해 DB에 데이터를 추가하거나 DB에서 데이터를 읽어온다.

## 서비스의 구현

* 서비스는 핵심이 되는 기능의 로직을 제공한다.
* 예를 들어 비밀번호 변경 기능은 다음 로직을 서비스에서 수행한다.
  * DB에서 비밀번호를 변경할 회원의 데이터를 구한다.
  * 존재하지 않으면 예외를 발생시킨다.
  * 회원 데이터의 비밀번호를 변경한다.
  * 변경 내역을 DB에 반영한다.
* 웹 어플리케이션을 사용하든 명령행에서 실행하든 비밀번호 변경 기능을 제공하는 서비스는 동일한 로직을 수행한다.
  * 이런 로직들은 한 번의 과정으로 끝나기보다는 몇 단계의 과정을 거치곤 한다.
  * 이때 중간 과정에서 실패가 나면 이전까지 했던 것을 취소해야 하고, 모든 과정을 성공적으로 진행했을 때 완료해야 한다.
  * 따라서 서비스 메서드는 트랜잭션 범위에서 실행한다. 이를 위해 @Transactional 애노테이션을 사용할 수 있다.
* 서비스를 구현할 때 한 서비스 클래스가 하나의 기능만 가지도록 구현할 수도 있고, 같은 데이터를 사용하는 기능들을 모아서 구현할 수도 있다.
* 서비스 클래스의 메서드는 기능을 실행하는데 필요한 값을 파라미터로 전달받는다.
  * 필요한 필드들을 하나씩 받을 수도 있지만, 이들을 모은 커맨드 객체로 해당 타입을 받으면 하나의 매개변수로 모든 값들을 받을 수 있어 편하다.
  * 커맨드 클래스를 작성한 것은 스프링 MVC가 제공하는 폼 값 바인딩과 검증, 스프링 폼 태그와의 연동 기능을 사용하기 위함이다.
* 서비스 메서드는 기능을 실행한 후 결과를 알려주어야 한다. 결과는 크게 두 가지 방식으로 알려준다.
  * 리턴 값을 이용한 정상 결과
  * 예외를 이용한 비정상 결과

## 컨트롤러에서의 DAO 접근

* 서비스 메서드에서 어떤 로직도 수행하지 않고 단순히 DAO의 메서드만 호출하고 끝나는 코드도 있다.
  * 이 경우 컨트롤러는 서비스를 사용해야 할 필요가 없으므로 DAO에 직접 접근해도 큰 틀에서 웹 어플리케이션의 계층 구조는 유지된다.
  
## 패키지 구성

* 구성 요소들은 크게 웹 요청을 처리하기 위한 것과 기능을 제공하기 위한 것으로 구분할 수 있다.
  * 웹 요청을 처리하기 위한 영역에는 컨트롤러 클래스와 관련 클래스들(Validator 등)이 위치한다.
  * 기능 제공 영역에는 서비스, DAO, 모델 클래스가 위치한다.
  * 기능 제공 영역은 service, dao, model과 같은 세부 패키지로 구분하기도 한다.
  
* 웹 어플리케이션이 복잡해지는 경우 도메인 주도 설계를 적용하기도 한다.
  * 도메인 주도 설계는 UI-서비스-도메인-인프라